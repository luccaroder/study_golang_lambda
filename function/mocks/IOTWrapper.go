// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	aws "github.com/aws/aws-sdk-go/aws"
	client "github.com/aws/aws-sdk-go/aws/client"

	iotdataplane "github.com/aws/aws-sdk-go/service/iotdataplane"

	mock "github.com/stretchr/testify/mock"
)

// IOTWrapper is an autogenerated mock type for the IOTWrapper type
type IOTWrapper struct {
	mock.Mock
}

// NewFromConfig provides a mock function with given fields: p, cfgs
func (_m *IOTWrapper) NewFromConfig(p client.ConfigProvider, cfgs ...*aws.Config) *iotdataplane.IoTDataPlane {
	_va := make([]interface{}, len(cfgs))
	for _i := range cfgs {
		_va[_i] = cfgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, p)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iotdataplane.IoTDataPlane
	if rf, ok := ret.Get(0).(func(client.ConfigProvider, ...*aws.Config) *iotdataplane.IoTDataPlane); ok {
		r0 = rf(p, cfgs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotdataplane.IoTDataPlane)
		}
	}

	return r0
}

// NewIOTWrapper creates a new instance of IOTWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOTWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOTWrapper {
	mock := &IOTWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
